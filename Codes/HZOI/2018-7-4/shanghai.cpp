#pragma GCC optimize("O2")
#include <bits/stdc++.h>
using namespace std;
inline int read() {
  int x = 0, f = 1;
  char ch = getchar();
  while (ch < '0' || ch > '9') {
    if (ch == '-') f = -1;
    ch = getchar();
  }
  while (ch >= '0' && ch <= '9') {
    x = x * 10 + ch - '0';
    ch = getchar();
  }
  return x * f;
}
const int MOD = 65521;
int Num[6] = {0, 0, 6, 18, 54, 162};
int a[6][205] {
  {0},
  {0},
  {0,14726,4001,17782,27337,44251,929,59229,58096,52576,29765,21733,59243,46956,57181,30383,36744,52489,34707,18677,7295,60787,33027,14455,14119,64314,20954,13947,27130,6522,64234,5138,55687,2586,23443,49400,62537,36765,843,58877,42015,32773,19971,19467,50324,45248,9878,42030,35621,28970,22811,56903,30633,60397,14901,12111,42401,20702,41611,3725,37986,24369,35112,37372,10129,34178,19045,25448,5430,30977,61532,37267,53087,51947,19117,22833,52524,62965,47189,15642,29301,29140,28434,12038,34215,19603,45291,54652,42296,37659,41439,35399,3844,43123,57884,59109,36405,5404,57821,55647,19495,44928,1579,37246,61034,54116,4221,23142,26418,8268,22603,51084,13440,41302,54148,33294,32931,51567,25096,11885,4024,60129,32919,9211,47687,62332,584,55660,61892,30139,27681,21497,6654,7235,3676,28749,35432,44566,44102,26120,32224,62939,2346,15549,17352,17682,3728,49921,17193,19830,26612,62790,52253,27264,1930,30455,8207,28708,63648,21936,51596,30924,10961,15852,40348,39667,6727,29474,35757,24735,53562,40482,25747,8527,20076,12347,6963,20640,32972,2993,31447,8136,12690,44101,8523,29987,7640,53475,12223,28004,16296,9048,27933,9710,48153,15983,52249,26713,23450,16296,10396},
  {0,36168,63550,43716,42050,22537,6076,14572,6261,56784,37620,57442,3471,43627,6001,46102,21167,29956,26067,31409,50300,31243,62965,8213,24267,16009,17911,36452,886,55664,35472,10561,32903,36028,7804,39680,30108,56342,13843,51370,24817,57587,35487,1403,5198,38028,41952,24606,13544,40141,47250,44144,64823,30609,13692,33992,46755,44248,27794,5389,24503,50618,38291,38302,7288,51481,42184,50324,58587,52194,52008,57137,50487,62476,1776,60499,50671,44431,34668,61094,54353,363,35312,25424,61536,48493,52614,34146,15560,32219,1869,18126,14452,25597,50693,7472,43594,9330,24268,30,44783,20994,57172,12531,37684,35650,13144,52788,20024,56354,19918,30728,30606,49274,20118,13967,26363,46524,41435,34677,9167,64291,33976,39947,2346,59056,22246,9321,5914,36012,31900,31697,54133,37940,47423,6241,65484,54562,38796,6956,41920,35830,27909,60597,5034,19986,50215,58859,55413,23598,60923,47856,17688,65220,52483,58055,12717,36972,10620,20796,55406,17587,33333,8068,53391,24494,42701,23631,51500,55451,21176,35983,37983,29654,65234,11854,26675,15106,46506,25978,6736,47551,65018,63996,6872,36408,14145,38093,5428,36111,50242,19901,13224,11668,51815,63276,36488,37478,28253,27160,22748},
  {0,24463,18683,63189,6104,15064,60939,5108,30884,48522,53159,51448,44802,25255,1343,54461,22264,14980,30703,40698,30641,4721,7627,59840,29277,53858,41849,52942,26753,56814,23701,5161,3751,62001,59067,31328,1084,30477,61543,45881,62054,20007,45929,19401,26878,26350,52803,43797,64858,61082,12338,31973,33090,33956,21810,34544,4190,57560,52715,49263,50204,3810,26041,31447,28808,23333,20852,2756,31564,48059,60218,45370,30574,48177,52248,43554,38500,12166,10641,50777,59791,51809,50995,64207,28953,5581,21038,57162,11022,30276,54219,26944,7399,22210,13095,17120,35734,45435,4560,49186,45344,56123,38237,37488,60423,28033,54803,13668,8795,15496,3902,4124,25298,5110,4494,51292,60047,28359,7284,1203,1339,22987,55154,522,8231,30822,20862,49824,49658,13354,38910,44832,2054,19735,39762,61153,14271,45108,44050,28307,9848,29857,8527,64350,41904,56414,53960,3331,3459,63050,34136,16937,27257,6294,5475,22606,24897,2173,48705,20363,32092,52402,32423,43837,62663,34074,15305,53041,61291,50562,42886,7378,32542,25285,40285,30798,51419,37122,30142,26126,20053,34345,48811,22117,52152,59108,6776,12783,32711,51801,22879,61557,52173,40812,40738,43087,3316,53122,19760,29890,22240},
  {0,40757,56759,1895,3710,15280,40381,27494,42590,45942,46226,4201,64024,26768,41146,2839,57415,45261,18437,19547,34769,5118,1282,62750,31296,62980,42068,57199,26653,51220,13640,60680,16245,27774,54000,14218,38367,56167,56929,61021,33773,62448,58886,2385,24829,45945,46912,21640,18358,36563,28022,33944,42920,38354,47928,52596,36132,28846,50297,46818,25798,48043,58726,47491,31838,56042,32772,22166,49864,13935,19648,521,63481,2020,38638,35612,42103,18176,51317,36874,63761,54291,47966,13735,34283,57328,15342,31700,9304,61996,13174,58295,39455,43873,6530,38902,28841,48576,64348,47329,9533,17733,38313,31869,19978,20775,50463,14683,13131,29902,351,19925,2860,5112,21389,58902,62380,56670,32690,1501,30082,16172,56527,50661,48473,51934,18084,59554,19668,31400,18454,18680,28997,61623,48579,4333,31229,34275,46430,49785,39399,54582,26873,2452,13904,6074,46467,59233,43350,55145,35635,52365,57841,29069,12377,44369,17612,25777,48302,31610,16214,15544,61155,27005,10047,22468,10078,63,46700,57796,9975,65036,47084,25347,42901,13408,4053,21478,62435,17113,22335,25616,31491,11966,2324,40677,50513,59141,26694,31792,1981,47464,30649,47932,36074,20166,47925,13523,29003,41595,13616}
};
struct Matrix {
  long long a[170][170];
  int n;
  Matrix(int _n = 0) {
    n = _n;
    memset (a, 0, sizeof (a));
  }
  inline Matrix operator * (const Matrix &c) const {
    Matrix ans(n);
    for (register int i = 1; i <= n; ++i) {
      for (register int j = 1; j <= n; ++j) if (a[i][j]) {
        for (register int k = 1; k <= n; ++k) if (c.a[j][k]) {
          ans.a[i][k] = ans.a[i][k] + a[i][j] * c.a[j][k];
        }
      }
    }
    for (register int i = 1; i <= n; ++i) {
      for (register int j = 1; j <= n; ++j) {
        ans.a[i][j] = ans.a[i][j] % MOD;
      }
    }
    return ans;
  }
  inline Matrix operator ^ (register long long b) {
    Matrix a = *this, ans(n);
    for (register int i = 1; i <= n; ++i) ans.a[i][i] = 1;
    while (b) {
      if (b & 1) ans = ans * a;
      b >>= 1;
      a = a * a;
    }
    return ans;
  }
}A[6];
int ss[2005][2005];
int gauss(int n) {
  for (int i = 1; i <= n; ++i)
    for (int j = 1; j <= n; ++j)
      ss[i][j] = (ss[i][j] + MOD) % MOD;
  int ans = 1;
  for (int i = 1; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j) {
      while (ss[j][i]) {
        int t = ss[i][i] / ss[j][i];
        for (int k = i; k <= n; ++k) {
          ss[i][k] = (ss[i][k] - 1ll * ss[j][k] * t % MOD + MOD) % MOD;
          swap(ss[j][k], ss[i][k]);
        }
        ans = MOD - ans;
      }
    }
    ans = 1ll * ans * ss[i][i] % MOD;
  }
  return ans;
}
void Add(int x, int y) {
  ss[x][x]++, ss[y][y]++;
  ss[x][y]--, ss[y][x]--;
}
int main() {
  // freopen ("shanghai.in", "r", stdin);
  // freopen ("shanghai.out", "w", stdout);
  int k = read();
  long long n;
  scanf ("%lld", &n);
  if (n <= 300) {
    for (int i = 1; i <= n; ++i) {
      for (int j = 1; j <= k; ++j) {
        int l = i + j;
        if (l > n) l = l - n;
        Add(i, l);
      }
    }
    printf ("%d\n", gauss(n - 1)); 
  }
  else {
    A[2].a[1][1]=4,A[2].a[2][1]=0,A[2].a[3][1]=65511,A[2].a[4][1]=0,A[2].a[5][1]=4,A[2].a[6][1]=65520;
    A[2].n = 6;
    for (int i = 2; i <= A[2].n; ++i) A[2].a[i - 1][i] = 1;
    
    A[3].a[1][1]=4,A[3].a[2][1]=8,A[3].a[3][1]=18,A[3].a[4][1]=65401,A[3].a[5][1]=65269,A[3].a[6][1]=65038,A[3].a[7][1]=72,A[3].a[8][1]=272,A[3].a[9][1]=964,A[3].a[10][1]=272,A[3].a[11][1]=72,A[3].a[12][1]=65038,A[3].a[13][1]=65269,A[3].a[14][1]=65401,A[3].a[15][1]=18,A[3].a[16][1]=8,A[3].a[17][1]=4,A[3].a[18][1]=65520;
    A[3].n = 18;
    for (int i = 2; i <= A[3].n; ++i) A[3].a[i - 1][i] = 1;

    A[4].a[1][1]=6,A[4].a[2][1]=15,A[4].a[3][1]=0,A[4].a[4][1]=30,A[4].a[5][1]=62797,A[4].a[6][1]=60175,A[4].a[7][1]=64321,A[4].a[8][1]=63502,A[4].a[9][1]=7551,A[4].a[10][1]=27432,A[4].a[11][1]=56468,A[4].a[12][1]=63447,A[4].a[13][1]=45434,A[4].a[14][1]=59589,A[4].a[15][1]=49862,A[4].a[16][1]=56027,A[4].a[17][1]=40848,A[4].a[18][1]=38206,A[4].a[19][1]=22675,A[4].a[20][1]=8556,A[4].a[21][1]=3412,A[4].a[22][1]=32492,A[4].a[23][1]=56715,A[4].a[24][1]=38363,A[4].a[25][1]=45055,A[4].a[26][1]=20818,A[4].a[27][1]=27014,A[4].a[28][1]=20818,A[4].a[29][1]=45055,A[4].a[30][1]=38363,A[4].a[31][1]=56715,A[4].a[32][1]=32492,A[4].a[33][1]=3412,A[4].a[34][1]=8556,A[4].a[35][1]=22675,A[4].a[36][1]=38206,A[4].a[37][1]=40848,A[4].a[38][1]=56027,A[4].a[39][1]=49862,A[4].a[40][1]=59589,A[4].a[41][1]=45434,A[4].a[42][1]=63447,A[4].a[43][1]=56468,A[4].a[44][1]=27432,A[4].a[45][1]=7551,A[4].a[46][1]=63502,A[4].a[47][1]=64321,A[4].a[48][1]=60175,A[4].a[49][1]=62797,A[4].a[50][1]=30,A[4].a[51][1]=0,A[4].a[52][1]=15,A[4].a[53][1]=6,A[4].a[54][1]=65520;
    A[4].n = 54;
    for (int i = 2; i <= A[4].n; ++i) A[4].a[i - 1][i] = 1;

    A[5].a[1][1]=8,A[5].a[2][1]=16,A[5].a[3][1]=65511,A[5].a[4][1]=304,A[5].a[5][1]=1112,A[5].a[6][1]=62517,A[5].a[7][1]=8818,A[5].a[8][1]=65348,A[5].a[9][1]=42675,A[5].a[10][1]=8648,A[5].a[11][1]=3411,A[5].a[12][1]=62664,A[5].a[13][1]=34224,A[5].a[14][1]=61359,A[5].a[15][1]=23789,A[5].a[16][1]=47033,A[5].a[17][1]=9577,A[5].a[18][1]=18774,A[5].a[19][1]=26446,A[5].a[20][1]=25242,A[5].a[21][1]=2440,A[5].a[22][1]=16835,A[5].a[23][1]=19355,A[5].a[24][1]=24778,A[5].a[25][1]=54491,A[5].a[26][1]=33418,A[5].a[27][1]=44673,A[5].a[28][1]=31664,A[5].a[29][1]=47318,A[5].a[30][1]=45699,A[5].a[31][1]=57034,A[5].a[32][1]=58329,A[5].a[33][1]=16947,A[5].a[34][1]=14821,A[5].a[35][1]=37483,A[5].a[36][1]=29701,A[5].a[37][1]=44701,A[5].a[38][1]=57248,A[5].a[39][1]=45494,A[5].a[40][1]=20917,A[5].a[41][1]=51056,A[5].a[42][1]=23909,A[5].a[43][1]=32660,A[5].a[44][1]=48089,A[5].a[45][1]=10311,A[5].a[46][1]=61927,A[5].a[47][1]=58068,A[5].a[48][1]=19461,A[5].a[49][1]=11155,A[5].a[50][1]=62649,A[5].a[51][1]=39025,A[5].a[52][1]=36755,A[5].a[53][1]=38928,A[5].a[54][1]=31565,A[5].a[55][1]=26603,A[5].a[56][1]=24094,A[5].a[57][1]=10349,A[5].a[58][1]=15499,A[5].a[59][1]=13713,A[5].a[60][1]=26713,A[5].a[61][1]=29605,A[5].a[62][1]=28753,A[5].a[63][1]=24627,A[5].a[64][1]=62639,A[5].a[65][1]=16313,A[5].a[66][1]=6983,A[5].a[67][1]=45353,A[5].a[68][1]=19779,A[5].a[69][1]=57391,A[5].a[70][1]=61923,A[5].a[71][1]=7930,A[5].a[72][1]=19732,A[5].a[73][1]=34243,A[5].a[74][1]=31283,A[5].a[75][1]=21822,A[5].a[76][1]=15252,A[5].a[77][1]=63919,A[5].a[78][1]=32152,A[5].a[79][1]=22840,A[5].a[80][1]=52349,A[5].a[81][1]=39683,A[5].a[82][1]=52349,A[5].a[83][1]=22840,A[5].a[84][1]=32152,A[5].a[85][1]=63919,A[5].a[86][1]=15252,A[5].a[87][1]=21822,A[5].a[88][1]=31283,A[5].a[89][1]=34243,A[5].a[90][1]=19732,A[5].a[91][1]=7930,A[5].a[92][1]=61923,A[5].a[93][1]=57391,A[5].a[94][1]=19779,A[5].a[95][1]=45353,A[5].a[96][1]=6983,A[5].a[97][1]=16313,A[5].a[98][1]=62639,A[5].a[99][1]=24627,A[5].a[100][1]=28753,A[5].a[101][1]=29605,A[5].a[102][1]=26713,A[5].a[103][1]=13713,A[5].a[104][1]=15499,A[5].a[105][1]=10349,A[5].a[106][1]=24094,A[5].a[107][1]=26603,A[5].a[108][1]=31565,A[5].a[109][1]=38928,A[5].a[110][1]=36755,A[5].a[111][1]=39025,A[5].a[112][1]=62649,A[5].a[113][1]=11155,A[5].a[114][1]=19461,A[5].a[115][1]=58068,A[5].a[116][1]=61927,A[5].a[117][1]=10311,A[5].a[118][1]=48089,A[5].a[119][1]=32660,A[5].a[120][1]=23909,A[5].a[121][1]=51056,A[5].a[122][1]=20917,A[5].a[123][1]=45494,A[5].a[124][1]=57248,A[5].a[125][1]=44701,A[5].a[126][1]=29701,A[5].a[127][1]=37483,A[5].a[128][1]=14821,A[5].a[129][1]=16947,A[5].a[130][1]=58329,A[5].a[131][1]=57034,A[5].a[132][1]=45699,A[5].a[133][1]=47318,A[5].a[134][1]=31664,A[5].a[135][1]=44673,A[5].a[136][1]=33418,A[5].a[137][1]=54491,A[5].a[138][1]=24778,A[5].a[139][1]=19355,A[5].a[140][1]=16835,A[5].a[141][1]=2440,A[5].a[142][1]=25242,A[5].a[143][1]=26446,A[5].a[144][1]=18774,A[5].a[145][1]=9577,A[5].a[146][1]=47033,A[5].a[147][1]=23789,A[5].a[148][1]=61359,A[5].a[149][1]=34224,A[5].a[150][1]=62664,A[5].a[151][1]=3411,A[5].a[152][1]=8648,A[5].a[153][1]=42675,A[5].a[154][1]=65348,A[5].a[155][1]=8818,A[5].a[156][1]=62517,A[5].a[157][1]=1112,A[5].a[158][1]=304,A[5].a[159][1]=65511,A[5].a[160][1]=16,A[5].a[161][1]=8,A[5].a[162][1]=65520;
    A[5].n = 162;
    for (int i = 2; i <= A[5].n; ++i) A[5].a[i - 1][i] = 1;
    
    Matrix c = A[k] ^ (n - 300);
    int ans = 0;
    for (register int i = 1; i <= Num[k]; ++i) {
      ans = (ans + c.a[i][1] * a[k][201 - i] % MOD) % MOD;
    }
    printf ("%d\n", ans);
  }
}
